apply {
    plugin 'java'
    plugin 'maven'
    plugin 'eclipse-wtp'
    plugin 'sonar-runner'
    plugin 'jetty'
    plugin 'war'
}

group = projectGroup
archivesBaseName = projectArchivesBaseName
version = projectVersion

description = projectDescription
sourceCompatibility = projectSourceCompatibility
targetCompatibility = projectTargetCompatibility

[compileJava, compileTestJava]*.options*.encoding = projectEncoding

[jettyRun, jettyRunWar, jettyStop]*.stopPort = jettyPort.asType(Integer.class)
[jettyRun, jettyRunWar, jettyStop]*.stopKey = 'stopKey'

ext {       
    archivaUploadCredential = {
        authentication(
            userName: archivaUser, 
            password: archivaPassword)
    }
}

sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://localhost:18090/sonarqube"
    }
}

repositories {
    maven {
        url internalRepository
        
        credentials {
            username archivaUser
            password archivaPassword
        }
    }
    
    maven {
        url libsRepository
        
        credentials {
            username archivaUser
            password archivaPassword
        }
    }
    
    maven {
        url releasesRepository
        
        credentials {
            username archivaUser
            password archivaPassword
        }
    }
    
    maven {
        url snapshotRepository
        
        credentials {
            username archivaUser
            password archivaPassword
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(
                url: releasesRepository, project.ext.archivaUploadCredential)        
            snapshotRepository(
                url: snapshotRepository, project.ext.archivaUploadCredential)
        }
    }
}

dependencies {
    providedCompile "javax.servlet:servlet-api:$javaxServletVersion",
                    "javax.ws.rs:jsr311-api:$jsr311Version"
    
    compile "aopalliance:aopalliance:$aopallianceVersion",
            "commons-logging:commons-logging:$commonsLoggingVersion",
   
            "org.springframework:spring-aop:$springVersion",
            "org.springframework:spring-beans:$springVersion",
            "org.springframework:spring-context:$springVersion",
            "org.springframework:spring-core:$springVersion",
            "org.springframework:spring-expression:$springVersion",
            "org.springframework:spring-web:$springVersion",
            "org.springframework:spring-webmvc:$springVersion",
    
            "org.springframework:spring-jdbc:$springVersion",
            "org.springframework:spring-tx:$springVersion",    
            
            "log4j:log4j:$log4jVersion",           
            "c3p0:c3p0:$c3p0Version",      
            "com.oracle:ojdbc6:$ojdbcVersion",
            "com.oracle:ucp:$ucpVersion",  
        
            "com.baz.scc.configuracion:cjcrl-configuracion:$configuracionVersion",            
            "org.jvnet.jax-ws-commons.spring:jaxws-spring:$jaxwsSpringVersion",            
    
            "com.fasterxml.jackson.core:jackson-core:$jacksonVersion",
            "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "com.baz.scc.configuracion:cjcrl-configuracion:$configuracionVersion",
            "com.baz.scc.commons:cjcrl-baz-commons-support:$bazCommonsSupportVersion",
            "com.baz.scc.commons:cjcrl-baz-commons-dao:$bazCommonsDaoVersion",
            "org.codehaus.jackson:jackson-jaxrs:$jacksonCodeVersion",
            "com.sun.jersey:jersey-client:$jerseyAllVersion",
            "com.sun.jersey:jersey-core:$jerseyAllVersion",
            "com.sun.jersey:jersey-bundle:$jerseyAllVersion",
    
            "com.sun.xml.messaging.saaj:saaj-impl:1.3.2",
            "javax.activation:activation:1.1",
            "com.sun.xml.parsers:jaxp-ri:1.4.2"
            

    runtime "javax.servlet:jstl:$jstlVersion",
    
                       
            "org.codehaus.jettison:jettison:$jettisonVersion",
            "com.sun.xml.ws:jaxws-rt:$jaxwsrtVersion"
            
            
    
    testCompile "junit:junit:$junitVersion",
                "org.springframework:spring-test:$springVersion",
                "org.hamcrest:hamcrest-core:$hamcrestCoreVersion"
}

jar {   
    manifest {
        attributes 'Implementation-Title': projectTitle, 
                   'Implementation-Version': projectVersion, 
                   'Class-Path': configurations.runtime.files.collect { "libs/$it.name" }.join(' ')
    }
}

javadoc {
    options.encoding = projectEncoding
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    classifier = 'javadoc'
    
    from javadoc.destinationDir    
}

task sourcesJar(type: Jar) {
    classifier = 'sources'

    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

test {
    testLogging {
        events 'failed'
        exceptionFormat 'short'
        
        debug {
            events 'started', 'skipped', 'failed'
            exceptionFormat 'full'
        }
        
        error {
            events 'skipped', 'failed'
            exceptionFormat 'full'
        }
    }
}
